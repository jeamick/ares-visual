#!/usr/bin/env python
# -*- coding: utf-8 -*-
# author: Olivier NoguÃ¨s

import re
import time
import json

from ares.Lib.html import AresHtml
from ares.Lib import AresImports

# External package required
render_template_string = AresImports.requires(name='flask', reason='URL remappings', install='No need to install', package='render_template_string', raiseExcept=False, sourceScript=__file__)


class Text(AresHtml.Html):
  """ Python Wrapper to the FONT HTNL Tag """
  references = {'W3C Definition': 'https://www.w3schools.com/tags/tag_font.asp'}
  __pyStyle = ['CssText']
  name, category, callFnc, docCategory = 'Text', 'Text', 'text', 'Standard'

  def __init__(self, aresObj, vals, size, color, align, width, widthUnit, height, heightUnit, htmlCode, tooltip):
    super(Text, self).__init__(aresObj, vals, width=width, widthUnit=widthUnit, height=height, heightUnit=heightUnit, code=htmlCode)
    self.size = int(self.aresObj.pyStyleDfl['fontSize'][:-2]) if size is None else size
    self.color = color if color is not None else self.getColor("greyColor", 8)
    self._jsStyles = {"reset": True}
    self.css({'color': self.color, 'font-size': "%spx" % self.size, 'text-align': align})
    if tooltip:
      self.addAttr('title', tooltip)

  @property
  def val(self):
    """
    :category: Javascript features
    :example: myObj.val
    :returns: Javascript string with the function to get the current value of the component
    :dsc:
      Property to get the jquery value of the HTML object in a python HTML object.
      This method can be used in any jsFunction to get the value of a component in the browser.
      This method will only be used on the javascript side, so please do not consider it in your algorithm in Python
    """
    return '%s.html()' % self.jqId

  def addStyles(self, reset=None, maxlength=None):
    """
    :category: Javascript Builder function
    :rubric: JS
    :dsc:
      Add style properties to be used in the definition of the component in the Javascript layer
    :return: The object itself
    """
    if reset is not None:
      self._jsStyles['reset'] = reset
    if maxlength is not None:
      self._jsStyles['maxlength'] = maxlength
    return self

  def onDocumentLoadFnc(self):
    """ Pure Javascript onDocumentLoad Function """
    self.addGlobalFnc("%s(htmlObj, data, jsStyles)" % self.__class__.__name__, '''
      if (jsStyles.reset) { htmlObj.html(toAresMarkup(''+data)) } 
      else {
        if(data != ''){ 
          if ( (jsStyles.maxlength != undefined) && (data.length > jsStyles.maxlength) ) {
            var div = $("<div title='"+ data +"' data-html='true'>" + toAresMarkup(''+ data.slice(0, jsStyles.maxlength) ) + "...<i class='fas fa-times' onclick='$(this).parent().remove()' style='margin-left:10px;cursor:pointer'></i></div>") ;
            htmlObj.append(div) ; } 
          else {
            var div = $("<div>" + toAresMarkup(''+data) + "<i class='fas fa-times' onclick='$(this).parent().remove()' style='margin-left:10px;cursor:pointer'></i></div>") ; 
            htmlObj.append(div) ; }
        }
      } 
    ''', 'Javascript Object builder')

  def jsGenerate(self, jsData='data', jsDataKey=None, isPyData=False):
    """
    :category: Javascript builder
    :rubric: JS
    :dsc:
      Special jsGenerate function for a test component to allow Python string formating style.
      Basically the Javascript will follow the same formatting logic with a dictionary if the data isPyData.
      Otherwise on the pure js side there is no change, the data used is the data generated by the component triggering the event.
    :example: myObj.jsGenerate("Loaded File %(fileName)s size %(size)sko, last Modification date %(time)s", jsDataKey='data', isPyData=True)
    :return: Javascript String with the different pieces and functions calls used to build the component
    """
    if isPyData:
      jsData = json.dumps(jsData)
      formatStr = re.compile("%\(([0-9a-zA-Z_]*)\)s")
      matches = formatStr.findall(jsData)
      if matches:
        for res in formatStr.finditer(jsData):
          if jsDataKey is not None:
            jsData = jsData.replace(res.group(0), '"+ data["%s"].%s +"' % (jsDataKey, res.group(1)) )
          else:
            jsData = jsData.replace(res.group(0), '"+ data.%s +"' % res.group(1) )
      else:
        if jsDataKey is not None:
          jsData = "%s['%s']" % (jsData, jsDataKey)
    else:
      jsData = "%s['%s']" % (jsData, jsDataKey)
    return " %(fncName)s( %(jsId)s, %(jsData)s, %(jsStyles)s) " % {'fncName': self.__class__.__name__, 'jsId': self.jqId,
                                                                   'jsData': jsData, 'jsStyles': json.dumps(self._jsStyles)}

  def __str__(self):
    """
    :category: HTML features
    :example: str(myObj)
    :returns: A String representing the HTML object
    :dsc:
      Mandatory function for any child class of Html.
      Return the String representation of a Text HTML tag
    """
    return '<div %s></div>%s' % (self.strAttr(pyClassNames=self.__pyStyle), self.helper)

  def to_word(self, document):
    """
    :category: Python Output
    :example: myObj.to_word()
    :dsc:
      Add to the internal document object a word text section
    """
    document.add_paragraph(self.vals)


class Code(AresHtml.Html):
  """ Python Wrapper to the Bootsrap CODE Tag """
  references = {'Bootstrap Definition': 'https://v4-alpha.getbootstrap.com/content/code/'}
  __pyStyle = ['CssDivNoBorder']
  name, category, callFnc, docCategory = 'Code', 'Text', 'code', 'Standard'
  editable, scriptTitle = None, ''

  def __init__(self, aresObj, vals, size, color, width, widthUnit, height, heightUnit, edit, htmlCode):
    super(Code, self).__init__(aresObj, vals, code=htmlCode, width=width, widthUnit=widthUnit, height=height, heightUnit=heightUnit)
    self.edit = edit
    self.size = int(self.aresObj.pyStyleDfl['fontSize'][:-2]) if size is None else size
    self.color = color if color is not None else self.getColor("greyColor", 8)
    self.css( {'color': self.color, 'display': 'block', 'font-size': self.size, 'margin': 'auto', 'margin': '5px 0 5px 0'} )

  @property
  def val(self):
    """
    :category: Javascript features
    :example: myObj.val
    :returns: Javascript string with the function to get the current value of the component
    :dsc:
      Property to get the jquery value of the HTML object in a python HTML object.
      This method can be used in any jsFunction to get the value of a component in the browser.
      This method will only be used on the javascript side, so please do not consider it in your algorithm in Python
    """
    return '%s.html()' % self.jqId

  def onDocumentReady(self):
    """ Return the javascript calls to be returned to update the component """
    self.aresObj.jsOnLoadFnc.add("%(pyCls)s(%(jqId)s, %(htmlId)s_data.split('\\n'), %(edit)s) ; " % {'edit': json.dumps(self.edit), 'pyCls': self.__class__.__name__, 'jqId': self.jqId, 'htmlId': self.htmlId} )

  def onDocumentLoadFnc(self):
    """ Pure Javascript onDocumentLoad Function """
    self.addGlobalFnc("%s(htmlObj, data, edit)" % self.__class__.__name__, ''' htmlObj.empty();
      if ( edit == true) 
       {htmlObj.append('<div style="position:relative;float:right;padding:2px 5px 2px 5px;cursor:pointer;background-color:%(blackColor)s;color:%(whiteColor)s">Edit</div>') ;}
      data.forEach(function(rec) { htmlObj.append('<code>' + rec + '</code><br />') ; }) ; 
      ''' % {"blackColor": self.getColor("greyColor", 8), "whiteColor": self.getColor("greyColor", 0)}, 'Javascript Object builder')

  def editable(self, urlPost, title=None):
    """ """
    self.editable = urlPost
    self.scriptTitle = title

  def __str__(self):
    """ Return the String representation of a Code HTML tag """
    if self.editable is not None:
      self.aresObj.jsOnLoadFnc.add(
        '''
        $('#%(htmlId)s div').on('click', function(event) {
          %(jqId)s.empty();
          %(jqId)s.append('<span style="position:relative;float:right;padding:2px 5px 2px 5px;cursor:pointer;background-color:%(backGroundColor)s;color:%(whiteColor)s">Save</span>') ;
          %(jqId)s.attr('contenteditable','true');
          %(jqId)s.css('padding', '0 0 0 5px') ;
          recordSet_%(htmlId)s.forEach(function(rec) { %(jqId)s.append(rec + "\\n") ; }) ;
          %(jqId)s.append( "<br />" ) ;
          
          $('#%(htmlId)s span').on('click', function(event) {
            var content = %(jqId)s.text();
            $.post( "/%(url)s", {content: content.slice(4, content.length), title: '%(title)s'}, function( data ) {
                location.reload(); }); });   
          }); ''' % {'jqId': self.jqId, "url": self.editable, 'htmlId': self.htmlId, 'backGroundColor': self.getColor('baseColor', 6),
                     'whiteColor': self.getColor('greyColor', 0), 'title': self.scriptTitle})
    return '<div %s></div>%s' % (self.strAttr(pyClassNames=self.pyStyle), self.helper)


class Preformat(AresHtml.Html):
  """ Python Wrapper for the HTML preformatted tag """
  references = {'W3C Definition': "https://www.w3schools.com/html/html_styles.asp"}
  name, category, callFnc, docCategory = 'Pre formatted text', 'Text', 'preformat', 'Standard'

  def __init__(self, aresObj, vals, size, color, width, widthUnit, height, heightUnit, htmlCode):
    super(Preformat, self).__init__(aresObj, vals, code=htmlCode, width=width, widthUnit=widthUnit, height=height, heightUnit=heightUnit)
    self.size = int(self.aresObj.pyStyleDfl['fontSize'][:-2]) if size is None else size
    color = color if color is not None else self.getColor("greyColor", 8)
    self.css( {'color': color, 'font-size': size} )

  @property
  def val(self):
    """ Property to get the jquery value of the HTML objec in a python HTML object """
    return '%s.html()' % self.jqId

  def onDocumentReady(self):
    """ Return the javascript calls to be returned to update the component """
    self.aresObj.jsOnLoadFnc.add( '%s.html(%s) ;' % (self.jqId, self.jsVal) )

  def onDocumentLoadFnc(self): return True

  def __str__(self):
    """  String representation of the HTML object """
    return '<pre %s></pre>%s' % (self.strAttr(pyClassNames=self.pyStyle), self.helper)


class Paragraph(AresHtml.Html):
  """ Python Wrapper to the HTML P Tag """
  references = {'W3C Definition': "https://www.w3schools.com/html/html_styles.asp"}
  __pyStyle = ['CssText', 'CssDivNoBorder']
  name, category, callFnc, docCategory = 'Paragraph', 'Text', 'paragraph', 'Standard'

  def __init__(self, aresObj, text, size, color, backgroundColor, border, width, widthUnit, height, heightUnit, htmlCode, encoding):
    jsStyles, tmpText = [], []
    if not isinstance(text, list):
      content = []
      for line in text.strip().split("\n"):
        content.append(line.strip())
      text = [" ".join(content)]
    for t in text:
      cssStyles = re.search(" css\{(.*)\}", t)
      jsAttr = {}
      if cssStyles is not None:
        content = t.replace(cssStyles.group(0), '' ).decode(encoding) if hasattr(t, 'decode') else t.replace(cssStyles.group(0), '' )
        tmpText.append(content)
        for cssAttr in cssStyles.group(1).split(","):
          cssKey, cssVal = cssAttr.split(":")
          jsAttr[cssKey.strip()] = cssVal.strip()
      else:
        if hasattr(t, 'decode'):
          tmpText.append(t.decode(encoding))
        else:
          tmpText.append(t)
      jsStyles.append(jsAttr)
    super(Paragraph, self).__init__(aresObj, tmpText, code=htmlCode, width=width, widthUnit=widthUnit, height=height, heightUnit=heightUnit)
    self._jsStyles = jsStyles
    if border:
      self.css('border', '1px solid %s' % self.getColor("greyColor", 8))
    size = int(self.aresObj.pyStyleDfl['fontSize'][:-2]) if size is None else size
    color = color if color is not None else self.getColor("greyColor", 8)
    backgroundColor = backgroundColor if backgroundColor is not None else self.getColor("greyColor", 0)
    self.css( {"background-color": backgroundColor, 'text-align': 'justify', 'color': color,
               'font-size': '%spx' % size, 'margin-top': '3px', "text-justify": 'distribute'})

  @property
  def val(self):
    """ Property to get the jquery value of the HTML objec in a python HTML object """
    self.aresObj.jsOnLoadFnc.add('''
      function paraGrapVal(htmlId) {
        var result = []; $('#'+ htmlId).find('p').each(function() {result.push($(this).html())});
        return result.join('\\n');}''')
    return "paraGrapVal('%s') " % self.htmlId

  def onDocumentLoadFnc(self):
    """ Pure Javascript onDocumentLoad Function """
    self.addGlobalFnc("%s(htmlObj, data, jsStyles)" % self.__class__.__name__, ''' htmlObj.empty() ;
      if (typeof data === 'string' || data instanceof String) {data = data.split("\\n")}; 
      data.forEach(function(line, i){
        var p = $("<p></p>").css( jsStyles[i] ).html(toAresMarkup(line)); htmlObj.append(p)})''')

  def __str__(self):
    """ Return the String representation of a Code HTML tag """
    return '<div %s></div>%s' % (self.strAttr(pyClassNames=self.pyStyle), self.helper)

  def to_word(self, document):
    from docx.enum.text import WD_ALIGN_PARAGRAPH

    p = document.add_paragraph(self.vals)
    p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY

  def to_xls(self, workbook, worksheet, cursor):
    """

    :param workbook:
    :param worksheet:
    :param cursor:
    :return:
    :link xlxWritter Documentation: https://xlsxwriter.readthedocs.io/format.html
    """
    worksheet.write(cursor['row'], 0, "\n".join(self.vals))
    cursor['row'] += 2


class BlockQuote(AresHtml.Html):
  """ Python Wrapper to the HTML Block qutoe Bootstrap object

  """
  references = {'Bootstrap Definition': 'https://v4-alpha.getbootstrap.com/content/typography/'}
  __pyStyle = ['CssDivNoBorder']
  name, category, callFnc, docCategory = 'Block quotation', 'Text', 'blockquote', 'Standard'

  def __init__(self, aresObj, text, author, size, color, width, widthUnit, height, heightUnit, align, htmlCode):
    super(BlockQuote, self).__init__(aresObj, text, code=htmlCode, width=width, widthUnit=widthUnit, height=height, heightUnit=heightUnit)
    self.vals = {'text': self.vals, 'author': author if author is not None else 'Risklab'}
    size = self.aresObj.pyStyleDfl['fontSize'] if size is None else "%spx" % size
    color = color if color is not None else self.getColor("greyColor", 8)
    if align is None:
      align = 'left'
    self.css({'color': color, 'font-size': size, 'text-align': align, 'display': 'inline-block', 'white-space': 'nowrap'})

  @property
  def val(self):
    """ Property to get the jquery value of the HTML objec in a python HTML object """
    return "$('#%s > p').html() + ' by ' + $('#%s cite').html()" % (self.htmlId, self.htmlId)

  def onDocumentLoadFnc(self):
    """ Pure Javascript onDocumentLoad Function """
    self.addGlobalFnc("%s(htmlObj, data)" % self.__class__.__name__, '''
      var div = htmlObj.find('div').first(); div.empty() ;
      data.text.split("\\n").forEach(function(rec) { div.append('<p style="margin:0;padding:0">'+ rec +'</p>') ; });
      if (data.author != null) { htmlObj.find('div').last().html('<small>by ' + data.author + '<cite></cite></small>') ; }  ''',
      'Javascript Object builder')

  def __str__(self):
    """  String representation of the HTML object """
    return '''
      <div style="width:100%%;text-align:center;display:block;">
        <blockquote %s>
          <div style="padding:5px;border-left:4px solid %s"></div>
          <div style="text-align:right"></div>
        </blockquote>%s
      </div>''' % (self.strAttr(pyClassNames=self.pyStyle), self.getColor('baseColor', 2), self.helper)

  @staticmethod
  def matchMarkDownBlock(data): return re.match(">>>Quote:(.*)", data[0])

  @staticmethod
  def matchEndBlock(data): return data.endswith("<<<")

  @classmethod
  def convertMarkDownBlock(cls, data, aresObj):
    author = data[0].split(':')[-1]
    getattr(aresObj, 'blockquote')("\n".join([val for val in data[1:-1]]), author)
    return ["aresObj.blockquote(%s, '%s')" % (json.dumps([val for val in data[1:-1]]), author)]

  @classmethod
  def jsMarkDown(self, vals): return [">>>Quote:%s" % self.vals['author'], [rec for rec in vals['text']], "<<<"]


class Title(AresHtml.Html):
  """ Python Wrapper to the HTML H1 Tag """
  references = {'W3C Definition': 'https://www.w3schools.com/tags/tag_hn.asp'}
  name, category, callFnc, docCategory = 'Title', 'Text', 'title', 'Standard'

  def __init__(self, aresObj, text, size, level, name, aresContent, color, picture, icon, marginTop, htmlCode, width, widthUnit, height, heightUnit, align):
    jsStyles, tmpText = {}, []
    cssStyles = re.search(" css\{(.*)\}", text)
    if cssStyles is not None:
      text = text.replace(cssStyles.group(0), '')
      for cssAttr in cssStyles.group(1).split(","):
        cssKey, cssVal = cssAttr.split(":")
        jsStyles[cssKey.strip()] = cssVal.strip()
    super(Title, self).__init__(aresObj, text, code=htmlCode, width=width, widthUnit=widthUnit, height=height, heightUnit=heightUnit)
    self._jsStyles = jsStyles
    self._name, self.level, self.icon, self.picture = name, level, icon, picture
    if aresContent is not None:
      self._name = aresContent.add(text, level, name)

    if level is not None:
      self.addPyCss("CssTitle%s" % level)
      self.css( 'color', color)
      if size is not None:
        self.css( 'font-sizs', "%spx" % size)
    else:
      self.addPyCss('CssTitle')
      self.size = int(self.aresObj.pyStyleDfl['headerFontSize'][:-2]) if size is None else size
      self.css( {'margin-top': '%spx' % marginTop} )
      if self.size > 21 and color is None:
        self.css('color', self.getColor('baseColor', 3))
      else:
        self.css('color', self.getColor('textColor', 0) if color is None else color)

    if align == 'center':
      self.css({'margin': 'auto', 'display': 'block'})
    else:
      self.css({'display': 'inline-block'})

  @property
  def jqId(self):
    """ Jquery call for this component, point to the underlying link and not the parent div """
    return "$('#%s a')" % self.htmlId

  @property
  def jqDiv(self):
    """ Jquery call for this component, point to div object"""
    return "$('#%s')" % self.htmlId

  @property
  def val(self):
    """ Property to get the jquery value of the HTML objec in a python HTML object """
    return "%s.html()" % self.jqId

  def onDocumentLoadFnc(self):
    """ Pure Javascript onDocumentLoad Function """
    self.addGlobalFnc("%s(htmlObj, data, jsStyles)" % self.__class__.__name__,
                      '''htmlObj.html(data).css( jsStyles )''', 'Javascript Object builder')

  def goTo(self, url=None, isPyData=True):
    """
    :category: Javascript Event
    :example: myObj.goTo('www.google.fr', isPyData=True)
    :dsc:
      Create a javasscript click event on the button to go to a new URL.
      This will create a link to open a new external web page or an internal report
    """
    self.css("cursor", "pointer")
    self.click( self.jsGoTo(url, isPyData))
    return self

  def __str__(self):
    """ Return a header HTML Tag """
    anchorName = ' name="%s"' % self._name if self._name is not None else ''
    if self.picture is not None:
      return render_template_string('<div %s><img src="{{ url_for(\'static\', filename=\'images/%s\') }}" />&nbsp;<a%s class="anchorjs-link"></a>%s</div>' % (self.strAttr(pyClassNames=self.pyStyle), self.picture, anchorName, self.helper))

    if self.icon is not None:
      return '<div %s><i class="%s"></i>&nbsp;<a%s class="anchorjs-link"></a>%s</div>' % (self.strAttr(pyClassNames=self.pyStyle), self.icon, anchorName, self.helper)

    return '<div %s><a%s class="anchorjs-link"></a>%s</div>' % (self.strAttr(pyClassNames=self.pyStyle), anchorName, self.helper)


  # -----------------------------------------------------------------------------------------
  #                                    MARKDOWN SECTION
  # -----------------------------------------------------------------------------------------
  @staticmethod
  def matchMarkDown(val): return val.startswith("# ") or val.startswith("## ") or val.startswith("### ") or val.startswith("#### ")

  @classmethod
  def convertMarkDown(cls, val, regExpResult, aresObj=None):
    helper, infoData = re.search("ares:info<(.*)>", val), None
    if helper is not None:
      infoData = helper.group(1)
      val = val.replace("ares:info<%s>" % infoData, "")
    for i in range(1, 5):
      startIndex = i+1
      if val.startswith("%s " % "".join(["#"] * i) ):
        if aresObj is not None:
          title = getattr(aresObj, cls.callFnc)(val[startIndex:], level=i)
          if infoData is not None:
            title.info(infoData)
        return ["aresObj.title('%s', level=%s)" % (val[startIndex:], i) ]

    if aresObj is not None:
      getattr(aresObj, cls.callFnc)(val[2:])
    return ["aresObj.%s('%s')" % (val[2:], cls.callFnc)]

  @classmethod
  def jsMarkDown(cls, vals, level=None):
    if level == 1: return "# %s" % vals
    if level == 2: return "## %s" % vals
    if level == 3: return "### %s" % vals
    return "#### %s" % vals


  # -----------------------------------------------------------------------------------------
  #                                    EXPORT OPTIONS
  # -----------------------------------------------------------------------------------------
  def to_ppt(self, document, currentSlide, newSlide=False):
    if newSlide:
      blankSlide = document.slide_layouts[6]
      currentSlide = document.slides.add_slide(blankSlide)
    textbox = currentSlide.shapes.add_textbox(0, 0, 100, 100)
    textbox.text_frame.text = self.vals
    return currentSlide

  def to_word(self, document):
    if self.level is not None:
      document.add_heading(self.vals, self.level)
    else:
      document.add_heading(self.vals)

  def to_xls(self, workbook, worksheet, cursor):
    """

    :param workbook:
    :param worksheet:
    :param cursor:
    :return:
    :link xlxWritter Documentation: https://xlsxwriter.readthedocs.io/format.html
    """
    cell_format = workbook.add_format({'bold': True, 'font_color': self.color, 'font_size': self.size})
    worksheet.write(cursor['row'], 0, self.vals, cell_format)
    cursor['row'] += 2


class Numeric(AresHtml.Html):
  """ Represents a figure in a nice display """
  name, category, callFnc, docCategory = 'Number', 'Number', 'number', 'Standard'

  def __init__(self, aresObj, number, label, size, color, tooltip, htmlCode):
    super(Numeric, self).__init__(aresObj, number, code=htmlCode)
    size = int(self.aresObj.pyStyleDfl['headerFontSize'][:-2]) if size is None else size
    color = self.getColor('textColor', 0) if color is None else color
    self.css({"color": color, "font-size": "%spx" % size})
    self.tooltip(tooltip)
    self.label = label

  def onDocumentReady(self):
    """ Return the javascript calls to be returned to update the component """
    self.aresObj.jsOnLoadFnc.add("%s.html(FormatNumber(%s, 0, ',', ','))" % (self.jqId, self.vals))

  def onDocumentLoadFnc(self):
    self.addGlobalFnc("FormatNumber(n, decPlaces, thouSeparator, decSeparator)", '''
      decPlaces = isNaN(decPlaces = Math.abs(decPlaces)) ? 2 : decPlaces,
      decSeparator = decSeparator == undefined ? "." : decSeparator,
      thouSeparator = thouSeparator == undefined ? "," : thouSeparator,
      sign = n < 0 ? "-" : "",
      i = parseInt(n = Math.abs(+n || 0).toFixed(decPlaces)) + "",
      j = (j = i.length) > 3 ? j % 3 : 0;
      return sign + (j ? i.substr(0, j) + thouSeparator : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thouSeparator) + (decPlaces ? decSeparator + Math.abs(n - i).toFixed(decPlaces).slice(2) : "");
      ''', 'Javascript Object builder')

  def __str__(self):
    """ Return the String representation of a Font Number tag """
    if self.label is not None:
      return "%s<font %s></font>" % (self.label, self.strAttr(pyClassNames=self.pyStyle))

    return "<font %s></font>" % (self.strAttr(pyClassNames=self.pyStyle))


class LastUpdated(Text):
  name, category, callFnc, docCategory = 'Last Update', 'Text', 'update', 'Standard'

  def __init__(self, aresObj, vals, size, color, width, widthUnit, height, heightUnit, htmlCode):
    super(LastUpdated, self).__init__(aresObj, vals, size, color, width, widthUnit, height, heightUnit, htmlCode)
    self.vals = "%s %s" % (self.vals, time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime()))


class Highlights(AresHtml.Html):
  name, category, callFnc, docCategory = 'Highlights', 'Text', 'highlights', 'Standard'

  def __init__(self, aresObj, text, title, icon, type, size, color, width, widthUnit, height, heightUnit, htmlCode):
    super(Highlights, self).__init__(aresObj, text, width=width, widthUnit=widthUnit, height=height, heightUnit=heightUnit, code=htmlCode)
    self.size = int(self.aresObj.pyStyleDfl['fontSize'][:-2]) if size is None else size
    self.color = color if color is not None else self.getColor("greyColor", 8)
    self.title, self.icon, self.type = title, icon, type
    self.css( {'padding': "10px"} )
    self.addClass('alert alert-%s' % type)
    self.addAttr('role', "alert")

  def __str__(self):
    """ Return the String representation of a Text HTML tag """
    return """
      <div %s>
        <strong><i class='%s fa-2x'></i>&nbsp;%s</strong> %s 
      </div>""" % (self.strAttr(), self.icon, self.title, self.vals)


class SearchResult(AresHtml.Html):
  name, category, callFnc, docCategory = 'Search Result', 'Text', 'searchr', 'Advanced'

  def __init__(self, aresObj, recordSet, pageNumber, width, widthUnit, height, heightUnit):
    super(SearchResult, self).__init__(aresObj, recordSet, width=width, widthUnit=widthUnit, height=height, heightUnit=heightUnit)
    self._jsStyles = {'title': {'color': self.getColor("blueColor", 17), 'font-size': '18px'}, 'dsc': {'color': self.getColor('greyColor', 11)},
                      'url': {'color': self.getColor("greenColor", 1), 'font-size': '14px'}, 'visited': {'color': self.getColor('greyColor', 12)},
                      'link': {'color': self.getColor("blueColor", 16), 'cursor': 'pointer'}, 'pageNumber': pageNumber }

  def onDocumentLoadFnc(self):
    """ Pure Javascript onDocumentLoad Function """
    self.addGlobalFnc("%s(htmlObj, data, jsStyles, currPage)" % self.__class__.__name__, ''' htmlObj.empty() ; 
      if (typeof currPage == 'undefined') { currPage = 0 } ;
      var pageNumber = jsStyles.pageNumber ;
      data.slice(currPage * pageNumber).forEach( function(rec) {
        var newItem = $('<div style="margin:5px 10px 5px 10px;"></div>') ; 
        var title = $('<div>'+ rec['title'] + '</div>').css( jsStyles.title ) ;
        if (rec['urlTitle'] != undefined) {
          title.css( {'cursor': 'pointer'} ) ;
          title.click(function(e) { GoToReport(rec['urlTitle'], true, false) } )  ; }
        newItem.append( title ) ;
        if ( rec.icon != undefined) {
          var item = $('<div></div>').css( jsStyles.url ) ;
          item.append( $('<i class="'+ rec['icon'] +'" style="margin-right:5px"></i>') ).append(rec['url']) ;
          newItem.append( item  ) ; } 
        else { newItem.append( $('<div>'+ rec['url'] +'</div>').css( jsStyles.url )  ) ; }
        newItem.append( $('<div>'+ rec['dsc'] +'</div>').css( jsStyles.dsc ) ) ;
        if ( rec.visited != undefined) { newItem.append( $('<div>' + rec.visited + '</div>').css( jsStyles.visited )  ) ;}
        if ( rec.links != undefined) {
          rec.links.forEach( function(link) { 
            if ( link.url == undefined) { link.url = link.val; } ;
            newItem.append( $('<a href='+ link.url +' target="_blank">'+ link.val +'</a><br>').css( jsStyles.link )  ) ; }) ; };
        htmlObj.append( newItem ) ;
      }) ; 
      if ( data.length > 0) {
        var reste = data.length / pageNumber; var currIndex = currPage+1;
        var roundRest = Math.trunc( reste );
        if ( roundRest > reste) { reste ++ ; } ;
        var paginate = $( '<div style="display:inline-block;height:35px;padding:0;width:100%%;text-align:center;margin-top:10px" class="py_cssdivpagination"></div>') ;
        if ( currIndex > 1) {
          var href = $('<a href="#">&laquo;</a>');
          href.click({page: currPage-1, rec: data}, function(e) { %(class)s(htmlObj, e.data.rec, jsStyles, e.data.page) }) ;
          paginate.append( href ) ; };
        for (var i = 0; i < reste; i++) {
          var indexPage = i + 1 ;
          if ( currPage == i ) { 
            var href = $('<a href="#" style="background-color:%(greyColor)s;color:%(whiteColor)s">'+ indexPage +'</a>') ;
            href.click({page: i, rec: data}, function(e) { %(class)s(htmlObj, e.data.rec, jsStyles, e.data.page) }) ;
            paginate.append( href ) ; }
          else { 
            var href = $('<a href="#">'+ indexPage +'</a>') ;
            href.click({page: i, rec: data},  function(e) { %(class)s(htmlObj, e.data.rec, jsStyles, e.data.page) }) ;
            paginate.append( href ) ; } }
        if ( currIndex < reste) {
          var href = $('<a href="#">&raquo;</a>') ;
          href.click({page: currPage+1, rec: data}, function(e) { %(class)s(htmlObj, e.data.rec, jsStyles, e.data.page) }) ;
          paginate.append( href) } ;
        htmlObj.append( paginate ) ;
      } ''' % {"breadCrumb": self.aresObj.jsGlobal.breadCrumVar, "class": self.__class__.__name__,
               "greyColor": self.getColor("baseColor", 0), "whiteColor": self.getColor("greyColor", 0) }, 'Javascript Object builder')

  def __str__(self):
    self.cssPaginate = self.addPyCss('CssDivPagination')
    return '<div %s style="margin:5px 10px 5px 10px;"></div> ' % self.strAttr(pyClassNames=self.pyStyle)

